/*
 * Copyright (c) 2018-2024, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

import java.nio.charset.StandardCharsets

project(group: "io.fusionauth", name: "fusionauth-containers", version: "1.52.0", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  publications {
    docker {
      publication(name: "fusionauth-app-dockerfile", type: "docker", file: "docker/fusionauth/fusionauth-app/Dockerfile")
      publication(name: "fusionauth-docker-compose", type: "yml", file: "docker/fusionauth/docker-compose.yml")
    }
  }
}

/*
 * Define Plugins
 */
idea = loadPlugin(id: "org.savantbuild.plugin:idea:2.0.0-RC.7")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:2.0.0-RC.6")

/*
 * Targets
 */

target(name: "clean", description: "Clean project") {
  // No Op
}

target(name: "int", description: "runs an integration build") {
  // No Op
}

target(name: "idea", description: "Releases a local integration build of the project") {
  idea.iml()
}

target(name: "publish", description: "Releases the Docker images to DockerHub") {
  ProcessBuilder pb = new ProcessBuilder("git", "branch", "--show-current")
  def process = pb.redirectOutput(ProcessBuilder.Redirect.PIPE).directory(new File(".")).start()
  process.waitFor()
  def branch = new String(process.getInputStream().readAllBytes(), StandardCharsets.UTF_8).trim()

  // The theory is that if we release from a maintenance branch, a staging branch etc. this will be a pre-release or a maintenance release.
  def latestVersion = "main" == branch && !project.version.isPreRelease()
  def args = ["./publish.sh", "${project.version}" as String, "${latestVersion}" as String]

  pb = new ProcessBuilder(args).inheritIO().directory(new File('./docker/fusionauth'))
  process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  if (process.exitValue() != 0) {
    fail("Failed to publish Docker [${project.version}]")
  }
}

target(name: "release", description: "Releases a full version of the project") {
  release.release()
}
