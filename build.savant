/*
 * Copyright (c) 2018-2020, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"


project(group: "io.fusionauth", name: "fusionauth-containers", version: "1.32.2", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  publications {
    docker {
      publication(name: "fusionauth-app-dockerfile", type: "docker", file: "docker/fusionauth/fusionauth-app/Dockerfile")
      publication(name: "fusionauth-docker-compose", type: "yml", file: "docker/fusionauth/docker-compose.yml")
    }
  }
}

/*
 * Define Plugins
 */
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

/*
 * Targets
 */

target(name: "clean", description: "Clean project") {
  // No Op
}

target(name: "int", description: "runs an integration build") {
  // No Op
}

target(name: "idea", description: "Releases a local integration build of the project") {
  idea.iml()
}

target(name: "publish-multi-arch-experimental", description: "Releases the Docker images to DockerHub") {
  // Update to the latest ubuntu:focal build
  if (!cleanExecute("docker", "pull", "ubuntu:focal")) {
    fail("Failed to pull the latest Ubuntu image.")
  }

  // https://docs.docker.com/engine/reference/commandline/build/

  // Setup for multi-arch, still testing this out.
  if (!cleanExecute("docker", "buildx", "install")) {
    fail("Failed to install docker buildx.")
  }

  if (!cleanExecute("docker", "buildx", "create", "--use")) {
    fail("Failed to switch to the docker buildx driver.")
  }

  // I want to eventually publish "linux/amd64,linux/arm64,linux/arm/v7", but there is something failing when trying with linux/arm/v7
  // I think it is this: https://github.com/docker/buildx/issues/395 , but not sure how to solve it yet.
  // Still need to figure out the :latest tag and we may  just want to try to build these one at at time and push. But I think we have a use a different
  // strategy to do that. For now using --push so it pushes each image with the same tag and a different arch. Or maybe I can just build and push
  // the same tag and as long as the arch is different it will be fine. Need to test.
  if (switches.has("dryRun")) {
    if (!cleanExecute("docker", "buildx", "build", "--platform", "linux/amd64,linux/arm64", "-t",
                      "fusionauth/fusionauth-app:${project.version}" as String, "./docker/fusionauth/fusionauth-app")) {
      fail("Failed to build Docker image for fusionauth-app [${project.version}]")
    }
  } else {
    if (!cleanExecute("docker", "buildx", "build", "--platform", "linux/amd64,linux/arm64", "-t",
                      "fusionauth/fusionauth-app:${project.version}" as String, "./docker/fusionauth/fusionauth-app", "--push")) {
      fail("Failed to build Docker image for fusionauth-app [${project.version}]")
    }
  }

}

target(name: "publish", description: "Releases the Docker images to DockerHub") {

  // Update to the latest ubuntu:focal build
  if (!cleanExecute("docker", "pull", "ubuntu:focal")) {
    fail("Failed to pull the latest Ubuntu image.")
  }

  // https://docs.docker.com/engine/reference/commandline/build/

  // Build images
  if (!cleanExecute("docker", "build", "-t", "fusionauth/fusionauth-app:${project.version}" as String, "./docker/fusionauth/fusionauth-app")) {
    fail("Failed to build Docker image for fusionauth-app [${project.version}]")
  }

  // Don't build a pre-release latest tag
  if (!project.version.preRelease) {
    if (!cleanExecute("docker", "tag", "fusionauth/fusionauth-app:${project.version}" as String, "fusionauth/fusionauth-app:latest" as String)) {
      fail("Failed to build Docker image for fusionauth-app [latest]")
    }
  }

  // Push images
  if (!switches.has("dryRun")) {
    if (!cleanExecute("docker", "push", "fusionauth/fusionauth-app:${project.version}" as String)) {
      fail("Failed to push Docker image for fusionauth-app [${project.version}]")
    }

    // Don't push a pre-release latest tag
    if (!project.version.preRelease) {
      if (!cleanExecute("docker", "push", "fusionauth/fusionauth-app:latest" as String)) {
        fail("Failed to push Docker image for fusionauth-app [latest]")
      }
    }
  }
}

target(name: "release", description: "Releases a full version of the project") {
  release.release()
}

boolean cleanExecute(String... args) {
  ProcessBuilder pb = new ProcessBuilder(args).inheritIO().directory(new File('.'))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}
